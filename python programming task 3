{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "47f48032-0589-48be-9b4f-a12929857d9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File organization complete!\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import shutil\n",
    "\n",
    "def organize_files(source_dir):\n",
    "    \"\"\"\n",
    "    Organizes files in the given directory into subfolders based on file extensions.\n",
    "\n",
    "    Parameters:\n",
    "        source_dir (str): The directory where files are to be organized.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        # Ensure the source directory exists\n",
    "        if not os.path.exists(source_dir):\n",
    "            print(f\"Error: The directory '{source_dir}' does not exist.\")\n",
    "            return\n",
    "        \n",
    "        # Loop through files in the directory\n",
    "        for filename in os.listdir(source_dir):\n",
    "            file_path = os.path.join(source_dir, filename)\n",
    "            \n",
    "            # Skip directories\n",
    "            if os.path.isdir(file_path):\n",
    "                continue\n",
    "            \n",
    "            # Extract file extension\n",
    "            file_extension = os.path.splitext(filename)[1][1:].lower()\n",
    "            \n",
    "            # Skip files without extensions\n",
    "            if not file_extension:\n",
    "                file_extension = \"no_extension\"\n",
    "            \n",
    "            # Create a subfolder for the file type if it doesn't exist\n",
    "            folder_path = os.path.join(source_dir, file_extension)\n",
    "            if not os.path.exists(folder_path):\n",
    "                os.makedirs(folder_path)\n",
    "            \n",
    "            # Move the file to the appropriate subfolder\n",
    "            shutil.move(file_path, os.path.join(folder_path, filename))\n",
    "        \n",
    "        print(\"File organization complete!\")\n",
    "    \n",
    "    except PermissionError as e:\n",
    "        print(f\"Permission error: {e}\")\n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred: {e}\")\n",
    "\n",
    "# Update this path to point to your new folder on D: drive\n",
    "source_directory = \"D:/New folder\"\n",
    "\n",
    "organize_files(source_directory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39587282-57a6-4f82-96c1-3eaf666f3e46",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4e7d126-4a15-4d54-ac3b-8e64a7a7512b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d089c953-30d8-4281-afb1-e1b2570b1ec5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "541a316f-558e-4eb9-b616-0feb0d400ddb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2881585-1757-482c-b66f-be656d89b523",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
